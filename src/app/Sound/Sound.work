declare global {
    interface Window {
        AudioContext: any;
        webkitAudioContext: any;
    }

    interface HTMLAudioElement {
        crossOrigin: any;
    }
}

export default class Sound
{

    private context: AudioContext = null;
    private buffers: { [id: string]: any } = {};
    private loaded: { [id: string]: boolean } = {};
    private playing: { [id: string]: boolean } = {};
    private loop: { [id: string]: boolean } = {};
    private sources: { [id: string]: any } = {};

    private audio: { [id: string]: any } = {};
    // private audioBuffer: any = null;
    // private loaded: boolean = false;
    // private isPlaying: boolean = false;

    constructor()
    {
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        this.context = new AudioContext();
    }

    load(id: string): void
    {
        let request = new XMLHttpRequest();
        let url = 'audio/' + id + '.ogg';
console.log('url audio', id);
        this.loaded[id] = false;
        let audio = new Audio(); 
        audio.addEventListener('loadeddata', () => {
            console.log('canplay', this.audio);
            this.audio[id] = audio;
            this.loaded[id] = true;
            this.playing[id] = false;
            this.loop[id] = false;
        });

        audio.crossOrigin = "anonymous";
        audio.src = url;
        audio.loop = false;
        audio.autoplay = false;
        audio.muted = false;
        audio.volume = 1.0;
            // let source = this.context.createMediaElementSource(audio);
            // let gainNode = this.context.createGain();
            // source.connect(this.context.destination);
            // gainNode.connect(this.context.destination);
            // this.sources[id] = source;

            // this.context.decodeAudioData(request.response, (buffer) =>
            // {
            //     this.buffers[id] = buffer;
            //     this.loaded[id] = true;
            //     this.playing[id] = false;
            //     this.loop[id] = false;
            //     this.sources[id] = null;
            // });
    }

    loadList(list: Array<string>): void
    {
        setTimeout(() => {
            for(let i in list) this.load(list[i]);
        }, 3);
    }

    isLoaded(id: string): boolean
    {
        return (this.loaded.hasOwnProperty(id) && this.loaded[id] === true);
    }

    isPlaying(id: string): boolean
    {
        return (this.playing.hasOwnProperty(id) && this.playing[id] === true);
    }

    stop(id: string): void
    {
        if(!this.audio.hasOwnProperty(id)) return;
        if(!this.isLoaded(id)) return;
        // this.audio[id].loop = false;
        this.playing[id] = false;
        this.audio[id].currentTime = 0;
        this.audio[id].pause();
    }

    play(id: string, loop: boolean): void
    {
        console.log('play!isPlaying!', this.isPlaying(id));
        if(!this.audio.hasOwnProperty(id)) return;
        if(!this.isLoaded(id) || (loop && this.isPlaying(id))) 
        {
            // console.log('playing isLoaded', this.isLoaded(id));
            console.log('playing EE', id);
            return;
        }
        
        this.audio[id].loop = loop;
        this.audio[id].currentTime = 0;
        this.audio[id].play();
        this.playing[id] = loop;
        // this.sources[id].addEventListener('ended', () => {
        //     if(!loop)
        //     {
        //         this.playing[id] = false;
        //     }
        // });
    }

    // play(id: string, loop: boolean): void
    // {
    //     if(!this.isLoaded(id) || (loop && this.isPlaying(id))) return;
    //     this.loop[id] = loop;
    //     setTimeout(() => {
    //         let source = this.context.createBufferSource();
    //         this.sources[id] = source;
    //         source.buffer = this.buffers[id];
    //         source.connect(this.context.destination);
    //         if(this.loop[id]) 
    //         {
    //             source.addEventListener('ended', () => {
    //                 this.playing[id] = false;
    //                 source.disconnect();
    //                 this.sources[id] = null;
    //                 if(this.loop[id]) this.play(id, true);
    //             });
    //         }
    //         this.playing[id] = true;
    //         source.start(0); // play the source now
    //     }, 1);
    // }
}